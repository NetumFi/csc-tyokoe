---
- hosts: csc
  user: ansible
  become: yes
  vars:

  tasks:
# Users and groups
    - name: "Ensure group 'tyokoe' exists"
      group:
        name: tyokoe
        gid: 3001
        state: present
    - name: "Ensure group 'nginx' exists"
      group:
        name: nginx
        gid: 101
        state: present
    - name: "Add the user tyokoe with a specific uid and a primary group of 'tyokoe'"
      user:
        name: tyokoe
        comment: CSC DigiVisio2030 työkoesovelluskäyttäjä
        uid: 3001
        groups: tyokoe,docker,nginx
        home: "{{ infradir }}"
    - name: "Get docker group"
      getent:
        database: group
        split: ':'
        key: 'docker'
    - debug:
        var: ansible_facts.getent_group.docker[1]
    - name: "Set docker group fact"
      set_fact:
        docker_group: "{{ ansible_facts.getent_group.docker[1] }}"

# Directories
    - name: "Ensure infra directory exists"
      become: true
      become_user: tyokoe
      file:
        path: "{{ infradir }}"
        state: directory
    - name: "Ensure application directory exists"
      become: true
      become_user: tyokoe
      file:
        path: "{{ appdir }}"
        state: directory

# NGINX
    - name: "Create SSL key file"
      become: true
      copy:
        remote_src: yes
        src: "{{ key }}"
        dest: "{{ infradir }}/ssl.key"
        owner: tyokoe
        group: nginx
        mode: a-w,u+r,g+r
    - name: "Create SSL pem file"
      become: true
      shell: cat "{{ certificate }}" > "{{ pem }}" && cat "{{ intermediate_certificate }}" >> "{{ pem }}"
      args:
        creates: "{{ pem }}"
    - name: "Modify SSL pem file"
      become: true
      file:
        path: "{{ infradir }}/ssl.pem"
        owner: tyokoe
        group: nginx
        mode: a-w,u+r,g+r
    - name: "Create nginx.conf"
      become: true
      become_user: tyokoe
      template:
        src: 'docker-compose/nginx.conf.j2'
        dest: "{{ infradir }}/nginx.conf"
        mode: '0644'
      notify: "Restart nginx"

# Services docker-compose
    - name: "Create infra docker-compose.yml"
      become: true
      become_user: tyokoe
      template:
        src: 'docker-compose/docker-compose.yml.j2'
        dest: "{{ infradir }}/docker-compose.yml"
        mode: '0644'
# Application docker-compose
    - name: "Create application docker-compose.yml"
      become: true
      become_user: tyokoe
      copy:
        src: 'docker-compose/docker-compose-application.yml'
        dest: "{{ appdir }}/docker-compose.yml"
        mode: '0644'
# Promotion
    - name: "Copy promotion scripts"
      become: true
      become_user: tyokoe
      copy:
        src: "{{ item }}"
        dest: "{{ appdir }}"
        mode: '0554'
      with_fileglob:
        - docker-compose/*.sh
# ELK
    - name: "Copy elasticsearch.yml"
      become: true
      become_user: tyokoe
      copy:
        src: "docker-compose/elasticsearch.yml"
        dest: "{{ infradir }}"
        mode: '0644'
    - name: "Create kibana.yml"
      become: true
      become_user: tyokoe
      template:
        src: 'docker-compose/kibana.yml.j2'
        dest: "{{ infradir }}/kibana.yml"
        mode: '0644'
    - name: "Create logstash.yml"
      become: true
      become_user: tyokoe
      template:
        src: 'docker-compose/logstash.yml'
        dest: "{{ infradir }}/logstash.yml"
        mode: '0644'
    - name: "Create logstash.conf"
      become: true
      become_user: tyokoe
      template:
        src: 'docker-compose/logstash.conf.j2'
        dest: "{{ infradir }}/logstash.conf"
        mode: '0644'

# Run services
    - name: "Run docker compose"
      become: true
      become_user: tyokoe
      shell:
        chdir: "{{ infradir }}"
        cmd: docker compose up -d

# Configure ELK (wait for elasticsearch)
    - wait_for:
        host: localhost
        port: 9200
        delay: 10
        sleep: 1
        timeout: 60
    - name: "Set password for user kibana_system"
      shell:
        cmd: |
          curl -XPOST -D- 'http://localhost:9200/_security/user/kibana_system/_password' -H 'Content-Type: application/json' -u "elastic:{{ monitoring.elastic.password }}" -d '{"password": "{{ monitoring.kibana.system_password }}"}'
    - name: "Create role logstash_writer"
      shell:
        cmd: |
          curl -XPOST -D- 'http://localhost:9200/_security/role/logstash_writer' -H 'Content-Type: application/json' -u "elastic:{{ monitoring.elastic.password }}" -d '
          {
            "cluster": [
              "manage_index_templates",
              "monitor",
              "manage_ilm"
            ],
            "indices": [
              {
                "names": [
                  "logs-generic-default",
                  "logstash-*",
                  "ecs-logstash-*"
                ],
                "privileges": [
                  "write",
                  "create",
                  "create_index",
                  "manage",
                  "manage_ilm"
                ]
              },
              {
                "names": [
                  "logstash",
                  "ecs-logstash"
                ],
                "privileges": [
                  "write",
                  "manage"
                ]
              }
            ]
          }'
    - name: "Create user logstash_internal"
      shell:
        cmd: |
          curl -XPOST -D- 'http://localhost:9200/_security/user/logstash_internal' -H 'Content-Type: application/json' -u "elastic:{{ monitoring.elastic.password }}" -d '{ "password" : "{{ monitoring.logstash.internal_password }}", "roles" : ["logstash_writer"], "full_name" : "Internal Logstash User" }'

  handlers:
    - name: "Restart nginx"
      become: true
      become_user: tyokoe
      shell:
        chdir: "{{ infradir }}"
        cmd: "docker compose up -d --force-recreate nginx"
